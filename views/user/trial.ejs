<h1>Add Product</h1>
<form id="productForm" method="post" action="/add-productt" enctype="multipart/form-data">

  <div class="form-group">
      <label for="productName">Product Name</label>
      <input type="text" class="form-control" id="productName" name="productName" placeholder="Enter product name" required>
  </div>
  <div class="form-group">
      <label for="Brand">Brand</label>
      <input type="text" class="form-control" id="Brand" name="Brand" placeholder="Enter brand" required>
  </div>
  
  <div class="form-group">
      <label for="category">Category</label>
      <select class="form-select mb-2" id="category" name="category" required>
        <option value="" selected disabled>choose</option>
        <% categories.forEach((category) => { %>
            <option value="<%= category._id %>"><%= category.name %></option>
        <% }) %>
    </select>  </div>
  <div class="form-group">
      <label for="RegularPrice">Regular Price</label>
      <input type="number" class="form-control" id="RegularPrice" name="RegularPrice" placeholder="Enter regular price" required>
  </div>
  <div class="form-group">
      <label for="salePrice">Sale Price</label>
      <input type="number" class="form-control" id="salePrice" name="salePrice" placeholder="Enter sale price" required>
  </div>
  <div class="form-group">
      <label for="size">Size</label>
      <input type="text" class="form-control" id="size" name="size" placeholder="Enter size" required>
  </div>
  <div class="form-group">
      <label for="stock">Stock</label>
      <input type="number" class="form-control" id="stock" name="stock" placeholder="Enter stock" required>
  </div>
  <div class="form-group">
      <label for="productOffer">Product Offer</label>
      <input type="number" class="form-control" id="productOffer" name="productOffer" placeholder="Enter product offer" required>
  </div>

  <div class="form-group">
    <label for="description">Description</label>
    <textarea class="form-control" id="description" name="description" placeholder="Enter description" required></textarea>
</div>

  <div class="form-group">
      <label for="is_active">Is Active</label>
      <select class="form-control" id="is_active" name="is_active" required>
          <option value="true">Yes</option>
          <option value="false">No</option>
      </select>
  </div>
  <div class="form-group">
      <label for="mainImage">Main Image</label>
      <input type="file" class="form-control" id="mainImage" name="mainImage" onchange="previewAndCropMainImage(event)" required>
      <canvas id="mainImageCanvas"></canvas> <!-- Canvas for displaying cropped image -->
      <div class="preview-container" id="relatedImagesPreviewContainer"></div>

  </div>
  <button type="button" id="saveCropButton" onclick="saveCroppedImage()" class="btn btn-primary">Save crop</button>

  <div class="form-group">
    <label for="relatedImages">Related Images</label>
    <input type="file" class="form-control" id="relatedImages" name="relatedImages" required>
    <div class="preview-container" id="relatedImagesPreviewContainer"></div> <!-- Container for related images preview -->
</div>

<!-- <button type="button" onclick="saveRelatedImages()" class="btn btn-primary">Save related images</button> -->


  <button type="submit" class="btn btn-primary">Submit</button>
</form>

<!-- JavaScript for previewing images -->
<script>
document.addEventListener('DOMContentLoaded',()=>{
  const productForm=document.getElementById('productForm')
  productForm.addEventListener('submit',handleSubmit)
  function handleSubmit(event){
    event.preventDefault()
      const formData=new FormData(productForm)
      fetch('/add-productt',{
        method:'POST',
        body:formData
      })
      .then(response=>{
        console.log("response",response)
        if(response.ok){
          Swal.fire({
            icon:'success',
            title:'Product added successfully',
            showConfirmButton:false,
            timer:1500
          }).then(()=>{
            window.location.href='/list-products'
          })
        }else{
          Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Something went wrong! Please try again later.',
            showConfirmButton: true
          });
        }
      })
      .catch(error=>{
        console.error("Error Adding Product");
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Something went wrong! Please try again later.',
          showConfirmButton: true
        })
      })
    
  }
})
let cropper; // Declare cropper variable outside the function

function previewAndCropMainImage(event) {
  const mainImageFile = event.target.files[0];

  const reader = new FileReader();
  reader.onload = function(event) {
    const img = new Image();
    img.src = event.target.result;

    img.onload = function() {
      const mainImageCanvas = document.getElementById('mainImageCanvas');
      const ctx = mainImageCanvas.getContext('2d');

      mainImageCanvas.width = img.width;
      mainImageCanvas.height = img.height;

      ctx.drawImage(img, 0, 0);

      // Initialize Cropper
      cropper = new Cropper(mainImageCanvas, {
        aspectRatio: 16 / 9, // Set your desired aspect ratio
        viewMode: 1,
        autoCropArea: 1,
      });
    };
  };
  reader.readAsDataURL(mainImageFile);
}

function saveCroppedImage() {
  if (cropper) {
    // Get the cropped canvas
    const croppedCanvas = cropper.getCroppedCanvas();
    // Convert the canvas to base64 encoded image
    const croppedImageData = croppedCanvas.toDataURL();

    // Create a new image element
    const croppedImageElement = document.createElement('img');
    croppedImageElement.classList.add('preview-image');
    croppedImageElement.src = croppedImageData;

    // Append the image element to the preview container
    const previewContainer = document.getElementById('relatedImagesPreviewContainer');
    previewContainer.innerHTML = ''; // Clear previous contents
    previewContainer.appendChild(croppedImageElement);

    // Hide the Save crop button
    const saveCropButton = document.getElementById('saveCropButton');
    saveCropButton.style.display = 'none';
    const mainImageCanvas=document.getElementById('mainImageCanvas')
    mainImageCanvas.style.display='none'

    // Hide the cropper instance
    cropper.destroy();
  } else {
    alert('Please crop the main image before saving.');
  }
}


</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</body>
</html>